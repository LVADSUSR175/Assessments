# -*- coding: utf-8 -*-
"""LVADSUSR175_Datla_Prahalladh_Predictive_Analytics_IA_1_LAB_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DT834iBzh-mmgsW888xTPRXl8nR9rYeH
"""

import pandas as pd
B = pd.read_csv("/content/booking.csv")
B

B.head(5)
B.shape
B.info()

B.isnull().sum() # two columns has null values

B.duplicated().sum() # No duplicates

# EDA
# Univariate Analysis
# Plotting  histograms for numerical columns
import matplotlib.pyplot as plt
import seaborn as sns
for column in B.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(B[column])
    plt.title(f'{column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

# Plotting Barplots for categorical columns
for column in B.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    B[column].value_counts().plot(kind='bar')
    plt.title(f'{column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

#Bi-Variate Analysis
#Correlation between numerical columns
n = B.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = B[n].corr()
print(correlation_matrix)

# heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap')
plt.show()

# Outlier detection

M= B.select_dtypes(include=['float64', 'int64']).columns

#boxplot
for column in M:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=B[column])
    plt.title(f'{column}')
    plt.xlabel(column)
    plt.show()
# There are no outliers to work on as seen from the boxplot

B.info()
B.isnull().sum()
B["room type"].value_counts() # Replacing with mode values
B["room type"].fillna(B["room type"].mode()[0],inplace = True)

B.info()
B.isnull().sum()
B["average price"].fillna(B["average price"].mean(),inplace = True)

B.info()
B.isnull().sum() # Replaced all Null Values
# We can move forward to endoing

B.info()
# I will not be considering Booking_ID,date of reversation columns for this model

#Encoing all the object columns to int
from sklearn.preprocessing import LabelEncoder
len = LabelEncoder()
B['type of meal'] = len.fit_transform(B['type of meal'])
B['room type'] = len.fit_transform(B['room type'])
B['market segment type'] = len.fit_transform(B['market segment type'])
B['type of meal'] = len.fit_transform(B['type of meal'])

B.info()
# No null values, No duplicates, All columns are encoded to int or float
# Now moving forward towards model implementation

X = B.drop(columns=["Booking_ID","date of reservation","booking status"]) # assigning X and Y values # For X considering all the independent values
Y = B["booking status"]

X.shape

#neccessary libraries for the implementation
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=40)

# Normalizing
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train=pd.DataFrame(scaler.fit_transform(X_train[list(X.columns)]),
                                    columns=X.columns)
X_test=pd.DataFrame(scaler.transform(X_test[list(X.columns)]),
                                    columns=X.columns)

from sklearn.linear_model import LogisticRegression
from sklearn import metrics
import warnings
warnings.filterwarnings('ignore')
model= LogisticRegression()
model.fit(X_train, Y_train)
pred=model.predict(X_test)
ac=metrics.accuracy_score(pred, Y_test)
print(f"Accuracy is {ac}")

# Confusion Matrix
from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(Y_test, pred)
print("Confusion Matrix:")
print(conf_matrix)

