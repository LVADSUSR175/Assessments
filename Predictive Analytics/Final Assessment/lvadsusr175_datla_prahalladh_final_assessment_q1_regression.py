# -*- coding: utf-8 -*-
"""LVADSUSR175_Datla_Prahalladh_Final_Assessment_q1_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SrZ1xWodbpf-Bgt0ooQIS8uTP55SQbCz
"""

import pandas as pd
df = pd.read_csv("/content/fare.csv")
df

df.head(5)

df.shape
df.describe()

df.columns

df.info()df

#checking for null values
df.isnull().sum()  # No Null Values

#checking for duplicates
df.duplicated().sum() # No duplicates

# Moving forward to EDA
#EDA
# Univariate Analysis
# Plot histograms for numerical columns
import matplotlib.pyplot as plt
import seaborn as sns
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

#Correlation Analysis
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

# scatter plot
# Generate scatter plots for pairs of numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

# Outliers
# Identify numerical columns by data type
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()
# As we can see from the boxplot there are some outliers but I will be including them as There may be far places  to diff latitude and longitudes.

df.info()
# Encoding is not necessary here as all the columns which I want to use in the model are in numerical values

# Model Training and Testing
X = df.drop(columns =["key","pickup_datetime","fare_amount"])
Y = df["fare_amount"]

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=40)


from sklearn.preprocessing import MinMaxScaler,StandardScaler
scaler = MinMaxScaler()
X_train=pd.DataFrame(scaler.fit_transform(X_train[list(X.columns)]),
                                    columns=X.columns)
X_test=pd.DataFrame(scaler.transform(X_test[list(X.columns)]),
                                    columns=X.columns)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score,mean_squared_error
# Linear Regression model
model = LinearRegression()
model.fit(X_train, Y_train)

# Predictions
y_pred = model.predict(X_test)


# Evaluate the model
mse = mean_squared_error(Y_test, y_pred)
print("Mean Squared Error:", mse)

rmse = mean_squared_error(Y_test, y_pred,squared=False)
print("Root Mean Squared Error:", rmse)

# Coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

r2_s = r2_score(Y_test, y_pred)
print("R2 Score:", r2_s)