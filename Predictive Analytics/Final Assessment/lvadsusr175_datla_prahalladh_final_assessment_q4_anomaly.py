# -*- coding: utf-8 -*-
"""LVADSUSR175_Datla_Prahalladh_Final_Assessment_q4_Anomaly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1igGWNmrKU_FXWDtljHqJReecp7fLlcW8
"""

import pandas as pd
df = pd.read_csv("/content/anomaly_train.csv")
df

df.head(5)

df.shape
df.describe()

df.info()

df.isnull().sum()

df.duplicated().sum()

# Moving forward to EDA
#EDA
# Univariate Analysis
# Plot histograms for numerical columns
import matplotlib.pyplot as plt
import seaborn as sns
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

# Plot bar charts for categorical columns
for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

#Correlation Analysis
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

# scatter plot
# Generate scatter plots for pairs of numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

# Outliers
# Identify numerical columns by data type
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

df.info()

#No Null Values
#feature Engineering
#Encoidng
df["Type"].value_counts()
df["Location"].value_counts()
from sklearn.preprocessing import LabelEncoder
len=LabelEncoder()
for column in df.select_dtypes(include=['object']):
    df[column]=len.fit_transform(df[column])

df.info()

#Model Implementation
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
# Select the features # Not using TransactionID
features = ["Amount","Type","Time","Location"]
#New DataFrame
X = df[features]
# Model fitting
model = IsolationForest(n_estimators=100, contamination=0.1)
model.fit(X)

# Predict the anomalies in the data
y_pred = model.predict(X)
y_pred
# Add the predicted anomaly scores to the original dataframe
df["anomaly_score"] = model.decision_function(X)
anomalies = df.loc[df["anomaly_score"] < 0]
anomalies
df

anomalies

#Plot
# Creating  a scatter plot
plt.scatter(df["Amount"], df["anomaly_score"], label="Normal")
plt.scatter(anomalies["Amount"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Amount")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

plt.scatter(df["Type"], df["anomaly_score"], label="Normal")
plt.scatter(anomalies["Type"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Type")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

plt.scatter(df["Time"], df["anomaly_score"], label="Normal")
plt.scatter(anomalies["Time"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Time")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

plt.scatter(df["Location"], df["anomaly_score"], label="Normal")
plt.scatter(anomalies["Location"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Location")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()