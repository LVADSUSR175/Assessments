# -*- coding: utf-8 -*-
"""LVADSUSR175_Datla_Prahalladh_Final_Assessment_q3_Clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ep753OO4J-5XyYpDTF9K_259HB_F6-w-
"""

import pandas as pd
C = pd.read_csv("/content/customer_segmentation.csv")
C

C.head(5)

C.info()

C.shape
C.describe()

C.columns

#checking null values
C.isnull().sum()
# Income column had 24 Null values

#Checking duplicates
C.duplicated().sum() # No duplicates

#Moving forward to EDA
#EDA
# Univariate Analysis
# Plot histograms for numerical columns
import matplotlib.pyplot as plt
import seaborn as sns
for column in C.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(C[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

# Plot bar charts for categorical columns
for column in C.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    C[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

#Correlation Analysis
numerical_columns = C.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = C[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

# scatter plot
# Generate scatter plots for pairs of numerical variables
#numerical_columns = C.select_dtypes(include=['float64', 'int64']).columns
#for i in range(len(numerical_columns)):
 #   for j in range(i + 1, len(numerical_columns)):
  #      plt.figure(figsize=(10, 6))
   #     sns.scatterplot(data=C, x=numerical_columns[i], y=numerical_columns[j])
    #    plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
     #   plt.show()

# Outliers
# Identify numerical columns by data type
numerical_columns = C.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=C[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

C.info()

C["Income"].value_counts()

# feature engineering
# Removing Null Values
C["Income"].fillna(C["Income"].mean(),inplace = True)
#Filling Null values with avg of the column

C.isnull().sum()

C.info()
C["Education"].value_counts()
C["Marital_Status"].value_counts()
C["Dt_Customer"].value_counts()

#Encoding
# We have three columns which are in Object type



from sklearn.preprocessing import LabelEncoder
len=LabelEncoder()
C["Education"]=len.fit_transform(C["Education"])
C["Marital_Status"] = len.fit_transform(C["Marital_Status"])
C["Dt_Customer"] = len.fit_transform(C["Dt_Customer"])

C.info()

C.info()

#Scaling Using StandardScaler
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score



from sklearn.preprocessing import StandardScaler
ss=StandardScaler()
cols=['Education',	'Marital_Status','Income','Kidhome','Teenhome','Recency','MntWines','MntFruits',
      'MntMeatProducts','MntFishProducts','MntSweetProducts','MntGoldProds','NumDealsPurchases','NumWebPurchases',
      'NumWebVisitsMonth','Complain','Response']

C[cols]=ss.fit_transform(C[cols])

scaled_features=ss.fit_transform(C[cols])

#Finding the Optimal K value using elbow method
inertia_score=[]
for i in range(1,8):
    kmeans=KMeans(n_clusters=i,random_state=20)
    kmeans.fit(scaled_features)
    inertia_score.append(kmeans.inertia_)

#plot the elbow curve
plt.figure(figsize=(15,8))
plt.plot(range(1,8),inertia_score,marker='o')
plt.show()

# Model Implementation
from sklearn.cluster import KMeans
num_clusters = 2
kmeans = KMeans(n_clusters=num_clusters,random_state=42)
C['cluster'] = kmeans.fit_predict(scaled_features)
labels=kmeans.labels_
centers=kmeans.cluster_centers_

print(labels)

print(centers)

#Plot
plt.figure(figsize=(10,6))
sns.scatterplot(x='Education',y = 'Income',hue='cluster',palette=['green','red'],legend=True,data=C)
plt.xlabel("Education")
plt.ylabel("Income")
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(x='Marital_Status',y = 'Income',hue='cluster',palette=['green','red'],legend=True,data=C)
plt.xlabel("Marital_Status")
plt.ylabel("Income")
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(x='NumDealsPurchases',y = 'Income',hue='cluster',palette=['green','red'],legend=True,data=C)
plt.xlabel("NumDealsPurchases")
plt.ylabel("Income")
plt.show()

silhouette_score(C, C['cluster'])